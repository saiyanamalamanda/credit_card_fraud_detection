# -*- coding: utf-8 -*-
"""creditcardfraud_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sE5kgs0ePKiqaTuHucNlyXCa7Jk2UDXv
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from xgboost import XGBClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, accuracy_score
import joblib

df = pd.read_csv('creditcard.csv')
print(df)

print(df.info())

print(df.isnull().sum())

# Handle missing values
df.fillna(df.median(), inplace=True)
print(df.isnull().sum())

# Drop NaN values in Class
df = df.dropna(subset=['Class'])

# Ensure Class is integer and remove invalid values
df['Class'] = df['Class'].astype(int)
df = df[df['Class'].isin([0, 1])]

# Standardize numerical features
scaler = StandardScaler()
numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
df[numeric_cols] = scaler.fit_transform(df[numeric_cols])

# Define features and target
X = df.drop(columns=['Class'])
y = df['Class'].astype(int)

# Check unique values in y before SMOTE
print("Unique values in y before SMOTE:", np.unique(y))

# Handle class imbalance with SMOTE
smote = SMOTE(sampling_strategy=0.5, random_state=42, k_neighbors=5)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Check unique values in y after SMOTE
print("Unique values in y after SMOTE:", np.unique(y_resampled))

# Force binary labels (0 or 1)
y_resampled = np.where(y_resampled > 1, 1, y_resampled)

# Check again
print("Fixed unique values in y:", np.unique(y_resampled))

X_train, X_test, y_train, y_test = train_test_split(
    X_resampled, y_resampled, test_size=0.2, random_state=42, stratify=y_resampled
)

# Train model (XGBoost)
model = XGBClassifier(n_estimators=200, learning_rate=0.05, max_depth=8, random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("ROC-AUC Score:", roc_auc_score(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))

# Confusion Matrix Visualization
import matplotlib.pyplot as plt
import seaborn as sns

# Compute confusion matrix
cm = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(6,5))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Not Fraud", "Fraud"], yticklabels=["Not Fraud", "Fraud"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()